{"version":3,"sources":["components/FormGroup.jsx","components/Calculator.jsx","App.js","reportWebVitals.js","index.js"],"names":["FormGroup","name","value","onChange","labelText","className","htmlFor","type","step","id","Calculator","inputsArray","initialTestState","forEach","i","fillInitialState","useState","testState","setTestState","lastTestResult","setLastTestResult","testCalcError","setTestCalcError","correct","number","wrong","handleChange","e","preventDefault","target","onSubmit","Number","testResult","numberOfQuestions","numberToSubstract","Math","floor","finalTestScore","toFixed","calculateScore","map","input","style","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAiBeA,MAhBf,YAA0D,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,UAC1C,OACE,sBAAKC,UAAU,aAAf,UACE,uBAAOC,QAASL,EAAhB,SAAuBG,IACvB,uBACEG,KAAK,SACLC,KAAK,IACLC,GAAIR,EACJA,KAAMA,EACNC,MAAOA,EACPC,SAAUA,QC8DHO,MAtEf,WACE,IAAMC,EAAc,CAClB,CACEV,KAAM,SACNG,UAAW,2CAEb,CACEH,KAAM,UACNG,UAAW,0CAEb,CACEH,KAAM,QACNG,UAAW,0CAGTQ,EAAmB,IAyD3B,SAA0BD,EAAaC,GACrCD,EAAYE,SAAQ,SAACC,GAAD,OAAQF,EAAiBE,EAAEb,MAAQ,MAzDvDc,CAAiBJ,EAAaC,GAhBV,MAkBcI,mBAASJ,GAlBvB,mBAkBbK,EAlBa,KAkBFC,EAlBE,OAmBwBF,mBAAS,MAnBjC,mBAmBbG,EAnBa,KAmBGC,EAnBH,OAoBsBJ,mBAAS,MApB/B,mBAoBbK,EApBa,KAoBEC,EApBF,KAqBZC,EAA2BN,EAA3BM,QAASC,EAAkBP,EAAlBO,OAAQC,EAAUR,EAAVQ,MACnBC,EAAe,SAACC,GACpBA,EAAEC,iBACFV,EAAa,2BAAKD,GAAN,kBAAkBU,EAAEE,OAAO5B,KAAO0B,EAAEE,OAAO3B,UAuBzD,OACE,uBAAMO,GAAG,aAAaqB,SAtBH,SAACH,GAEpB,GADAA,EAAEC,kBAECL,IACAC,GACDO,OAAON,GAASM,OAAOR,GAAWQ,OAAOP,GAMzC,OAJAF,EACE,sGAEFF,EAAkB,MAGpB,IAAMY,EAqCV,YAAgE,IAAtCC,EAAqC,EAArCA,kBAAmBR,EAAkB,EAAlBA,MAAOF,EAAW,EAAXA,QAC5CW,EAAoBC,KAAKC,MAAMX,EAAQ,GAEvCY,GADed,EAAUW,GACQD,EAAqB,GAC5D,OAAOI,EAAiB,IAAM,EAAIA,EAAeC,QAAQ,GAAKD,EAzCzCE,CAAe,CAChCN,kBAAmBT,EACnBC,QACAF,YAEFH,EAAkBY,GAClBV,EAAiB,OAGjB,UACGX,EAAY6B,KAAI,SAACC,EAAO3B,GAAR,OACf,cAAC,EAAD,CAEEb,KAAMwC,EAAMxC,KACZC,MAAOe,EAAUwB,EAAMxC,MACvBE,SAAUuB,EACVtB,UAAWqC,EAAMrC,WAJZU,MAQT,wBAAQP,KAAK,SAAb,4BACA,mBAAGF,UAAU,QAAQqC,MAAO,CAAEC,MAAO,OAArC,SACGtB,GAAiBA,IAEpB,mBAAGqB,MAAO,CAAEC,MAAOxB,GAAkB,EAAI,QAAU,OAAnD,SACGA,GAAkBA,QCrDZyB,MAXf,WACE,OACE,+BACE,sBAAKvC,UAAU,OAAf,UACE,2DACA,cAAC,EAAD,UCIOwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.593ef991.chunk.js","sourcesContent":["import React from \"react\";\r\nfunction FormGroup({ name, value, onChange, labelText }) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name}>{labelText}</label>\r\n      <input\r\n        type=\"number\"\r\n        step=\"1\"\r\n        id={name}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormGroup;\r\n","import React, { useState } from \"react\";\r\nimport FormGroup from \"./FormGroup\";\r\n\r\nfunction Calculator() {\r\n  const inputsArray = [\r\n    {\r\n      name: \"number\",\r\n      labelText: \"¿Cuántas preguntas tiene el test?\",\r\n    },\r\n    {\r\n      name: \"correct\",\r\n      labelText: \"¿Cuántas preguntas has acertado?\",\r\n    },\r\n    {\r\n      name: \"wrong\",\r\n      labelText: \"¿Cuántas preguntas has fallado?\",\r\n    },\r\n  ];\r\n  const initialTestState = {};\r\n  fillInitialState(inputsArray, initialTestState);\r\n\r\n  const [testState, setTestState] = useState(initialTestState);\r\n  const [lastTestResult, setLastTestResult] = useState(null);\r\n  const [testCalcError, setTestCalcError] = useState(null);\r\n  const { correct, number, wrong } = testState;\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n    setTestState({ ...testState, [e.target.name]: e.target.value });\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      !correct ||\r\n      !number ||\r\n      Number(wrong) + Number(correct) > Number(number)\r\n    ) {\r\n      setTestCalcError(\r\n        \"Necesitas un número válido de preguntas y al menos el número de respuestas correctas\"\r\n      );\r\n      setLastTestResult(null);\r\n      return;\r\n    }\r\n    const testResult = calculateScore({\r\n      numberOfQuestions: number,\r\n      wrong,\r\n      correct,\r\n    });\r\n    setLastTestResult(testResult);\r\n    setTestCalcError(null);\r\n  };\r\n  return (\r\n    <form id=\"Calculator\" onSubmit={handleSubmit}>\r\n      {inputsArray.map((input, i) => (\r\n        <FormGroup\r\n          key={i}\r\n          name={input.name}\r\n          value={testState[input.name]}\r\n          onChange={handleChange}\r\n          labelText={input.labelText}\r\n        />\r\n      ))}\r\n\r\n      <button type=\"submit\">Give it to me!</button>\r\n      <p className=\"error\" style={{ color: \"red\" }}>\r\n        {testCalcError && testCalcError}\r\n      </p>\r\n      <p style={{ color: lastTestResult >= 5 ? \"green\" : \"red\" }}>\r\n        {lastTestResult && lastTestResult}\r\n      </p>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Calculator;\r\n\r\nfunction fillInitialState(inputsArray, initialTestState) {\r\n  inputsArray.forEach((i) => (initialTestState[i.name] = \"\"));\r\n}\r\n\r\nfunction calculateScore({ numberOfQuestions, wrong, correct }) {\r\n  const numberToSubstract = Math.floor(wrong / 3);\r\n  const finalCorrect = correct - numberToSubstract;\r\n  const finalTestScore = (finalCorrect / numberOfQuestions) * 10;\r\n  return finalTestScore % 1 !== 0 ? finalTestScore.toFixed(1) : finalTestScore;\r\n}\r\n","import \"./App.scss\";\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return (\n    <main>\n      <div className=\"card\">\n        <h1>Calcula aqui tu nota amor</h1>\n        <Calculator />\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}